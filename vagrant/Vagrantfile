######################
# Vagrant File Start #
######################

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    
    # MONORAIL SERVER
    config.vm.define "dev" do |target|
        target.vm.box = "rackhd/rackhd"
        target.vm.box_version = "0.17"
        target.vm.provider "virtualbox" do |v|
            v.memory = 4096
            v.cpus = 4
            v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
        end

        # Create a public network, which generally matched to bridged network.
        # Bridged networks make the machine appear as another physical device on
        # your network.
        # target.vm.network :public_network
        if ENV['WORKSPACE']
          target.vm.synced_folder "#{ENV['WORKSPACE']}/build-deps", "/home/vagrant/src/", type: "rsync"
          target.vm.synced_folder "#{ENV['WORKSPACE']}/build-log", "/home/vagrant/log"
          target.vm.synced_folder "#{ENV['WORKSPACE']}/build-config", "/home/vagrant/src/build-config"
        end
        
        if ENV['CONFIG_DIR']
          target.vm.synced_folder "#{ENV['WORKSPACE']}/#{ENV['CONFIG_DIR']}", "/opt/monorail/"
          target.vm.synced_folder "#{ENV['WORKSPACE']}/#{ENV['CONFIG_DIR']}", "/opt/onrack/etc/"
          target.vm.synced_folder "#{ENV['WORKSPACE']}/#{ENV['CONFIG_DIR']}", "/home/vagrant/opt/monorail/"
        end

        if ENV['PYTHON_REPOS']
          list = ENV['PYTHON_REPOS'].split(' ')
          list && list.each do |repo|
            config.vm.provision "shell" do |s|		
            s.inline = "cd /home/vagrant/src/#{repo} && pip install -r requirements.txt"		
            s.privileged = true
            end
          end
        end
        
        target.vm.network "public_network", ip: "172.31.128.1", bridge: "em1"
        target.vm.network "forwarded_port", guest: 8080, host: 9090
        target.vm.network "forwarded_port", guest: 5672, host: 9091
        target.vm.network "forwarded_port", guest: 9080, host: 9092
        target.vm.network "forwarded_port", guest: 8443, host: 9093
        #usc-service
        target.vm.network "forwarded_port", guest: 7080, host: 7080
        #mongoDb service
        target.vm.network "forwarded_port", guest: 27017, host: 37017
        
        # If true, then any SSH connections made will enable agent forwarding.
        # Default value: false
        target.ssh.forward_agent = true

        #target.vm.provision "file", source: "./upgrade_packages.sh", destination: "upgrade_packages.sh"
        #target.vm.provision "file", source: "./blacklist_mongo.txt", destination: "blacklist_mongo.txt"
        target.vm.provision "shell", inline: <<-SHELL
          timeout=0
          maxto=30
          sudo pm2 kill
          sudo npm remove pm2 -g
          sudo npm install pm2@2.0.19 -g
          sudo pm2 --version
          
          waitForPM2Daemon() {
            while [ ${timeout} != ${maxto} ]; do
              ps aux | grep PM2 | grep Daemon
              if [ $? = 0 ]; then 
                break
              fi
              sleep 1
              timeout=$((timeout + 1))
            done
            if [ "$timeout" -eq "$maxto" ];then
                echo "Timed out waiting for PM2 Daemon (duration=$timeout s)."
                exit 1
            fi
          }
          service isc-dhcp-server start
          service rsyslog stop
          sudo service mongodb restart
          echo manual | sudo tee /etc/init/rsyslog.override
          if [ "#{ENV['MULTI']}" ]; then
            pm2 logs > /home/vagrant/log/build/vagrant.log &
          else
            pm2 logs > /home/vagrant/log/"#{ENV['REPO_NAME']}"/vagrant.log &
          fi
          waitForPM2Daemon
          pm2 start rackhd-pm2-config.yml
        SHELL


    end
end

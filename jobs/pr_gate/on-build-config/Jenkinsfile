node{
    withEnv([
        "ghprbPullLink=${env.ghprbPullLink}",
        "ghprbTargetBranch=${env.ghprbTargetBranch}",
        "ghprbPullTitle=${env.ghprbPullTitle}",
        "prCommit=${env.prCommit}",
        "branch=${env.branch}",
        "IS_OFFICIAL_RELEASE=false",
        "date=current",
        "timezone=-0500",
        "OS_VER=${env.OS_VER}",
        "TFTP_STATIC_FILES=${env.TFTP_STATIC_FILES}",
        "HTTP_STATIC_FILES=${env.HTTP_STATIC_FILES}",
        "USE_VCOMPUTE=${env.USE_VCOMPUTE}",
        "TESTS=${env.TESTS}",
        "OVA_POST_TESTS=${env.OVA_POST_TESTS}",
        "BINTRAY_SUBJECT=${env.BINTRAY_SUBJECT}",
        "PUBLISH=false"
    ]){
        deleteDir()
        def pull_id = env.ghprbPullLink.tokenize('/')[-1]; 
        checkout scm
        def repo_dir = pwd()
        try{
            // Master CI will run test against lastest code of RackHD repos(excluding on-build-config)
            // It will use the on-build-config from the PR code cloned/checkouted in ```checkout scm``` 
            load("jobs/MasterCI/MasterCI")

        } finally{
            currentBuild.description += "<a href=${env.ghprbPullLink}> PR #${pull_id}: ${ghprbPullTitle}</a>";
            stage("Write Back"){
                // Generate a manifest file with the entry of the PR
                load("jobs/pr_gate/pr_parser.groovy")
                // Write back the status to the PR according to the manifest file generated by pr_parser.groovy
                withEnv([
                    "stash_manifest_name=${env.stash_manifest_name}",
                    "stash_manifest_path=${env.stash_manifest_path}"
                ]){
                    unstash "${env.stash_manifest_name}"
                    shareMethod.writeBackToGitHub(repo_dir, env.stash_manifest_path)
                }
            }
        }
    }
}

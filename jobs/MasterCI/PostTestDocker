node{
    // MasterDocker Jenkins test pipeline
    // This Pipeline optionally build Docker images, Start container, Run Post Tests
    // This Pipeline uses these jenkins credentials:
    // BINTRAY_CREDS, SUDO_CREDS (Debian), vCenter_IP
    // This Pipeline uses these jenkins parameters:
    // DOCKER_STASH_NAME, MANIFEST_FILE_URL, DOCKER_RACKHD_IP, USE_PREBUILT_IMAGES
    // DOCKER_IMAGES, DOCKER_BUILD_RECORD
    
    withEnv([
        "branch=${env.branch}",
        "IS_OFFICIAL_RELEASE=false",
        "date=current",
        "timezone=-0500",
        "OS_VER=${env.OS_VER}",
        "TFTP_STATIC_FILES=${env.TFTP_STATIC_FILES}",
        "HTTP_STATIC_FILES=${env.HTTP_STATIC_FILES}",
        "USE_VCOMPUTE=${env.USE_VCOMPUTE}",
        "TESTS=${env.TESTS}",
        "BINTRAY_SUBJECT=${env.BINTRAY_SUBJECT}",
        "PUBLISH=${env.PUBLISH}"
        ])
    {
        deleteDir()
        dir("build-config"){
            checkout scm
        }
        def shareMethod = load("build-config/jobs/ShareMethod.groovy")
        try{
            stage("Process Manifest"){
                // Generate a manifest file according to branch, date and timezone if manifest file url is null
                if("${MANIFEST_FILE_URL}" == null || "${MANIFEST_FILE_URL}" == "null" || "${MANIFEST_FILE_URL}" == ""){
                    timestamps{
                        withEnv([
                            "branch=${env.branch}",
                            "date=current",
                            "timezone=-0500"
                        ]){
                            sh '''#!/bin/bash -ex
                            pushd $WORKSPACE
                            ./build-config/build-release-tools/HWIMO-BUILD build-config/build-release-tools/application/generate_manifest.py \
                            --branch "$branch" \
                            --date "$date" \
                            --timezone "$timezone" \
                            --builddir b \
                            --force \
                            --jobs 8

                            arrBranch=($(echo $branch | tr "/" "\n"))
                            slicedBranch=${arrBranch[-1]}
                            manifest_file=$(find -maxdepth 1 -name "$slicedBranch-[0-9]*" -printf "%f\n")
                            mv $manifest_file manifest
                            '''
                        }
                    }
                }
                else{
                    sh 'curl -L $MANIFEST_FILE_URL -o manifest'
                }
            }
            stage("Generate Docker"){
                stash name: "masterci_manifest", includes: "manifest"
                env.stash_manifest_name = "masterci_manifest"
                env.stash_manifest_path = "manifest"
                
                def repo_dir = pwd() + "/build-config"
                def TESTS = "${env.TESTS}"
                def test_type = "manifest"

                // Never publish results
                Boolean create_tag = false
                Boolean publish = false
                // Use pre built docker images or build docker images from manifest
                if(env.USE_PREBUILT_IMAGES == "true"){
                  stage("Docker POST Test"){
                    shareMethod.testDocker(repo_dir)
                  }
                } else {
                    shareMethod.buildandtestDocker(repo_dir)
		}
            }
        } finally{
            echo "Docker Pipeline is Complete"
            // Test jenkins need Plugins to send test results
            // shareMethod.sendResult(false, false)
        }
    }
}

node{
    timestamps{
        withEnv([
            "tag_name=${env.tag_name}",
            "branch=${env.branch}",
            "date=current",
            "timezone=-0500",
            "IS_OFFICIAL_RELEASE=true",
            "TAG=${env.TAG}",
            "JUMP_VERSION=${env.JUMP_VERSION}",
            "PUBLISH=${env.PUBLISH}",
            "TESTS=${env.TESTS}",
            "OVA_POST_TESTS=${env.OVA_POST_TESTS}",
            "HTTP_STATIC_FILES=${env.HTTP_STATIC_FILES}",
            "TFTP_STATIC_FILES=${env.TFTP_STATIC_FILES}",
            "USE_VCOMPUTE=${env.USE_VCOMPUTE}",
            "OS_VER=${env.OS_VER}",
            "BINTRAY_SUBJECT=${env.BINTRAY_SUBJECT}",
            "BINTRAY_REPO=binary"])
        {
            def message = "Job Name: ${env.JOB_NAME} \n" + "Build Full URL: ${env.BUILD_URL} \n" + "Phase: STARTED \n"
            echo "$message"
            slackSend "$message"
            deleteDir()
            checkout scm
            def shareMethod = load("jobs/ShareMethod.groovy")
            try{
                stage("Check JIRA"){
                    load("jobs/SprintRelease/check_jira.groovy")
                }

                // If MANIFEST_FILE_URL is not defined, the value of "${env.MANIFEST_FILE_URL}" is "null"
                // If MANIFEST_FILE_URL is defined but not assigned, the value of "${env.MANIFEST_FILE_URL}" is ""
                if("${env.MANIFEST_FILE_URL}" == "null" || "${env.MANIFEST_FILE_URL}" == ""){
                    stage("Create Manifest"){
                        // The script create_manifest.groovy will upload a manifest file to bintray
                        // and save the download link in variable : env.MANIFEST_FILE_URL
                        load("jobs/create_manifest/create_manifest.groovy")
                    }
                }

                if(JUMP_VERSION == "true"){
                    load("jobs/SprintRelease/bump_version.groovy")
                }

                def manifest_name=env.MANIFEST_FILE_URL.tokenize('/')[-1]
                currentBuild.description = "<a href=${env.MANIFEST_FILE_URL}>${manifest_name}</a>"

                shareMethod.downloadManifest(env.MANIFEST_FILE_URL, manifest_name)
                stash name: "sprint_release_manifest", includes: "${manifest_name}"
                env.stash_manifest_name = "sprint_release_manifest"
                env.stash_manifest_path = "${manifest_name}"
  
                def repo_dir = pwd()
                def TESTS = "${env.TESTS}"
                def test_type = "manifest"
                // Create an instance of UnitTest/UnitTest.groovy   
                def unit_test = load("jobs/UnitTest/UnitTest.groovy")
                // Create an instance of FunctionTest/FunctionTest.groovy
                def function_test = load("jobs/FunctionTest/FunctionTest.groovy")
                def source_based_test = load("jobs/FunctionTest/SourceBasedTest.groovy")
                try{
                    stage("Unit Test"){
                        // Call the function runTest to run unit test
                        unit_test.runTest(env.stash_manifest_name, env.stash_manifest_path, repo_dir)
                    }
                    stage("Function Test"){
                        // Run function test
                        source_based_test.runTests(function_test)
                    }
                } finally{
                    unit_test.archiveArtifactsToTarget("UnitTest")
                    source_based_test.archiveArtifacts(function_test)
                }
                Boolean create_tag = TAG.toBoolean()
                Boolean publish = PUBLISH.toBoolean()
                shareMethod.buildAndPublish(publish, create_tag, repo_dir)
                currentBuild.result="SUCCESS"
            } finally{
                shareMethod.sendResult(true, true)
            }
        }
    }
}
